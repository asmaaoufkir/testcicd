input { pipeline { address => traces_update } }

filter { 

    # extract the json part of the message string into a separate field
    grok { 
        match => { "message" => "^.*?(?<logged_json>{.*)" } 
    } 
    
    # parse the json and remove the string field upon success
    json { 
        source => "logged_json" 
        target => "newevent"
        remove_field => [ "logged_json" ] 
    }
    
    # drops events starting with RECEPTION
    if ([newevent][messageEvent] =~ "RECEPTION") {
      drop {}
    }
    
    mutate{
        # remove leading and trailing < > characters
        gsub => [ 
            "[newevent][messageId]", "<", "",
            "[newevent][messageId]", ">", ""
		]
    }

   # ensure document_id is set
   # if messageId doesn't exist
   if ![newevent][messageId] {
       uuid {
           target => "document_id"
       }
   } else { # if mailet_messageId exist
       mutate{
          copy => { "[newevent][messageId]" => "document_id" }
       }
   }
   
   # get index name
   grok {
       match => {
           "[newevent][messageDateTime]" => "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}%{DATA:data}"
       }
       add_field => { "[@metadata][target_index]" => "msgsv-messages-%{year}.%{month}.%{day}" }
       add_field => { "[@metadata][error]" => "false" }
   }
   
   mutate{
       copy => { "[newevent][messageEvent]" => "[newevent_remapped][james_libelleEtat]" }
       copy => { "[newevent][dateEvent]" => "[newevent_remapped][james_dateEtat]" }
       remove_field => [ "year", "month", "day", "message" ]
   }
    
   # if previous step failed or couldn't find a match in the case of new ID
   if ![@metadata][target_index] {
     mutate {
       add_field => {
         "[@metadata][target_index]" => "msgsv-error-messages-%{+YYYY.MM.dd}"
       }
       add_field => { "[@metadata][error]" => "true" }
     }
   }
}

# upsert to elasticsearch
output {
  if "true" in [@metadata][error] {
      elasticsearch {
        hosts => ["https://service.localdomain:9200"]
        user => "admin"
        password => "ChangezMoi"
        ssl_certificate_verification => false
        index => "%{[@metadata][target_index]}"
        document_id => "%{document_id}"
      }
  } else {
     elasticsearch {
        hosts => ["https://service.localdomain:9200"]
        user => "admin"
        password => "ChangezMoi"
        ssl_certificate_verification => false
        index => "%{[@metadata][target_index]}"
        document_id => "%{document_id}"
        action => "update"
        script => "if (ctx._source.james_listEtats == null) {ctx._source.james_listEtats = [];} ctx._source.james_listEtats.add(params.event.get('newevent_remapped'));"
      } 
  }
}
